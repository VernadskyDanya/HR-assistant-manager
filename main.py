import telebot
import passwords
from telebot import types
bot = telebot.TeleBot(passwords.key)


def start(message_chat_id):
    button1 = types.InlineKeyboardButton(text="üë®üèº‚Äç‚öñÔ∏è–£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–µ–∫—Ä—É—Ç–º–µ–Ω—Ç—É", callback_data="recrut")
    button2 = types.InlineKeyboardButton(text="üìò –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –æ–±—É—á–µ–Ω–∏—é", callback_data="study")
    button3 = types.InlineKeyboardButton(text="üêß –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏", callback_data="adaptation")
    button4 = types.InlineKeyboardButton(text="üë©üèª‚Äçüî¨ –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –∫–∞–¥—Ä–æ–≤–æ–º—É —Ä–µ–∑–µ—Ä–≤—É",
                                         callback_data="persReserve")
    markup = types.InlineKeyboardMarkup()
    markup.row(button1)
    markup.row(button2)
    markup.row(button3)
    markup.row(button4)
    bot.send_message(message_chat_id, "–ß–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?\n", reply_markup=markup)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, " + str(message.from_user.first_name) +
                     ", —ç—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π HR –ø–æ–º–æ—â–Ω–∏–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è! –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n"
                     "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start")
    start(message.chat.id)


from branches import adaptBranch
from branches import persResBranch
from branches import recrutBranch
from branches import studyBranch

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è callback_query_handler
FUNCTIONS = dict(
                    # –í–µ—Ç–∫–∞ –í–æ–ø—Ä–æ—Å –ø–æ —Ä–µ–∫—Ä—É—Ç–º–µ–Ω—Ç—É
                    recrut=recrutBranch.recrut, vacation=recrutBranch.vacation, budget=recrutBranch.budget,
                    inSearch=recrutBranch.inSearch, outSearch=recrutBranch.outSearch, rules=recrutBranch.rules,
                    acceptIn=recrutBranch.acceptIn, wantOpenIn=recrutBranch.wantOpenIn, fetchIn=recrutBranch.fetchIn,
                    acceptOut=recrutBranch.acceptOut, wantOpenOut=recrutBranch.wantOpenOut,
                    # –í–µ—Ç–∫–∞ –í–æ–ø—Ä–æ—Å –ø–æ –æ–±—É—á–µ–Ω–∏—é
                    study=studyBranch.study, howToLearn=studyBranch.howToLearn, iKnow=studyBranch.iKnow,
                    helpProgram=studyBranch.helpProgram, restriction=studyBranch.restriction,
                    # –í–µ—Ç–∫–∞ –í–æ–ø—Ä–æ—Å –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
                    adaptation=adaptBranch.adaptation, whatToDo=adaptBranch.whatToDO, myRole=adaptBranch.myRole,
                    taskToCheck=adaptBranch.taskToCheck, baddy=adaptBranch.baddy, mentor=adaptBranch.mentor,
                    reminders=adaptBranch.reminders,
                    # –í–µ—Ç–∫–∞ –í–æ–ø—Ä–æ—Å –ø–æ –∫–∞–¥—Ä–æ–≤–æ–º—É —Ä–µ–∑–µ—Ä–≤—É
                    persReserve=persResBranch.persRes
)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "start":
        start(call.message.chat.id)
    else:
        FUNCTIONS[call.data](call.message.chat.id, bot)


bot.polling(none_stop=False, interval=0, timeout=20)
